// my-chats.js
import { auth, onAuthStateChanged } from "./firebase.js";

const chatsList = document.getElementById('chats-list');
const chatDetail = document.getElementById('chat-detail');
const chatsLoading = document.getElementById('chats-loading');
const noChats = document.getElementById('no-chats');
const noChatsMessage = document.getElementById('no-chats-message');
const noChatsActions = document.getElementById('no-chats-actions');
const chatsRoleInfo = document.getElementById('chats-role-info');
const backToListBtn = document.getElementById('back-to-list');
const chatWithName = document.getElementById('chat-with-name');
const chatJobTitle = document.getElementById('chat-job-title');
const messagesContainer = document.getElementById('messages-container');
const messageInput = document.getElementById('message-input');
const sendMessageBtn = document.getElementById('send-message-btn');
const viewVacancyBtn = document.getElementById('view-vacancy-btn');
const chatsSearch = document.getElementById('chats-search');
const filterAll = document.getElementById('filter-all');
const filterUnread = document.getElementById('filter-unread');
const filterRecent = document.getElementById('filter-recent');

let currentChatId = null;
let currentChatData = null;
let unsubscribeMessages = null;
let allChats = [];
let currentFilter = 'all';

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã URL
const urlParams = new URLSearchParams(window.location.search);
const chatIdFromUrl = urlParams.get('chat');
const jobIdFromUrl = urlParams.get('job');

onAuthStateChanged(auth, async (user) => {
  if (user && window.authManager && window.chatManager) {
    const role = window.authManager.getRole();
    window.chatManager.init(user, role);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–ª–∏
    showRoleInfo(role);
    
    await loadChats();
    
    // –ï—Å–ª–∏ –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ —Å —á–∞—Ç–æ–º, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
    if (chatIdFromUrl) {
      await openChat(chatIdFromUrl);
    }
  } else if (!user) {
    showNotAuthenticated();
  }
});

function showRoleInfo(role) {
  if (role === 'seeker') {
    chatsRoleInfo.innerHTML = `
      <span class="role-badge seeker-badge">üë§ –í—ã - —Å–æ–∏—Å–∫–∞—Ç–µ–ª—å</span>
      <p>–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è–º–∏ –ø–æ –≤–∞–∫–∞–Ω—Å–∏—è–º</p>
    `;
  } else if (role === 'employer') {
    chatsRoleInfo.innerHTML = `
      <span class="role-badge employer-badge">üè¢ –í—ã - —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å</span>
      <p>–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è–º–∏ –ø–æ –≤–∞—à–∏–º –≤–∞–∫–∞–Ω—Å–∏—è–º</p>
    `;
  }
}

function showNotAuthenticated() {
  chatsLoading.style.display = 'none';
  noChats.style.display = 'block';
  noChatsMessage.innerHTML = '–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á–∞—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É';
  noChatsActions.innerHTML = `
    <a href="register.html" class="auth-btn">–í–æ–π—Ç–∏ / –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</a>
  `;
}

async function loadChats() {
  try {
    showLoading();
    
    const currentUser = window.authManager.getUser();
    const currentRole = window.authManager.getRole();
    
    allChats = await window.chatManager.getUserChats(currentUser.uid);
    
    if (allChats.length === 0) {
      showNoChats(currentRole);
      return;
    }
    
    showChatsList();
    displayChats(allChats);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    setupFilters();
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤:', error);
    showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤: ' + error.message);
  }
}

function showNoChats(role) {
  chatsLoading.style.display = 'none';
  noChats.style.display = 'block';
  
  if (role === 'seeker') {
    noChatsMessage.innerHTML = `
      –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ —Å —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è–º–∏.<br>
      –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ, –æ—Ç–∫–ª–∏–∫–Ω—É–≤—à–∏—Å—å –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é –∏–ª–∏ –∑–∞–¥–∞–≤ –≤–æ–ø—Ä–æ—Å —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é.
    `;
    noChatsActions.innerHTML = `
      <a href="index.html" class="action-btn">üîç –ù–∞–π—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏–∏</a>
    `;
  } else {
    noChatsMessage.innerHTML = `
      –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —á–∞—Ç–æ–≤ —Å —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è–º–∏.<br>
      –ß–∞—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –∫–æ–≥–¥–∞ —Å–æ–∏—Å–∫–∞—Ç–µ–ª–∏ –Ω–∞—á–Ω—É—Ç –æ–±—â–µ–Ω–∏–µ –ø–æ –≤–∞—à–∏–º –≤–∞–∫–∞–Ω—Å–∏—è–º.
    `;
    noChatsActions.innerHTML = `
      <a href="add-job.html" class="action-btn">‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é</a>
      <a href="applications.html" class="action-btn">üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫–ª–∏–∫–∏</a>
    `;
  }
}

function displayChats(chats) {
  chatsList.innerHTML = '';
  
  chats.forEach(chat => {
    const chatElement = createChatElement(chat);
    chatsList.appendChild(chatElement);
  });
}

function createChatElement(chat) {
  const chatElement = document.createElement('div');
  chatElement.className = `chat-item ${hasUnreadMessages(chat) ? 'unread' : ''}`;
  chatElement.onclick = () => openChat(chat.id);
  
  const lastMessageTime = chat.lastMessageTime?.toDate?.();
  const timeText = lastMessageTime ? 
    formatTime(lastMessageTime) : 
    '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π';
  
  const currentRole = window.authManager.getRole();
  const partnerName = currentRole === 'seeker' ? chat.employerName : chat.applicantName;
  const partnerRole = currentRole === 'seeker' ? 'employer' : 'seeker';
  
  chatElement.innerHTML = `
    <div class="chat-avatar">
      ${partnerRole === 'employer' ? 'üè¢' : 'üë§'}
    </div>
    <div class="chat-content">
      <div class="chat-header">
        <h4 class="chat-partner-name">${partnerName}</h4>
        <span class="chat-time">${timeText}</span>
      </div>
      <p class="chat-job">${chat.jobTitle}</p>
      <p class="chat-last-message">${chat.lastMessage || '–ß–∞—Ç –Ω–∞—á–∞—Ç'}</p>
      ${hasUnreadMessages(chat) ? '<span class="unread-indicator">‚óè</span>' : ''}
    </div>
  `;
  
  return chatElement;
}

function hasUnreadMessages(chat) {
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false, –º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–∑–∂–µ
  return false;
}

function formatTime(date) {
  const now = new Date();
  const diff = now - date;
  const days = Math.floor(diff / (1000 * 60 * 60 * 24));
  
  if (days === 0) {
    return date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
  } else if (days === 1) {
    return '–í—á–µ—Ä–∞';
  } else if (days < 7) {
    return date.toLocaleDateString('ru-RU', { weekday: 'short' });
  } else {
    return date.toLocaleDateString('ru-RU', { day: 'numeric', month: 'short' });
  }
}

function setupFilters() {
  filterAll.addEventListener('click', () => applyFilter('all'));
  filterUnread.addEventListener('click', () => applyFilter('unread'));
  filterRecent.addEventListener('click', () => applyFilter('recent'));
  
  chatsSearch.addEventListener('input', () => {
    applyFilter(currentFilter);
  });
}

function applyFilter(filter) {
  currentFilter = filter;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É —Ñ–∏–ª—å—Ç—Ä–∞
  document.querySelectorAll('.filter-btn').forEach(btn => btn.classList.remove('active'));
  document.getElementById(`filter-${filter}`).classList.add('active');
  
  let filteredChats = [...allChats];
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
  const searchTerm = chatsSearch.value.toLowerCase();
  if (searchTerm) {
    filteredChats = filteredChats.filter(chat => 
      chat.jobTitle.toLowerCase().includes(searchTerm) ||
      chat.employerName.toLowerCase().includes(searchTerm) ||
      chat.applicantName.toLowerCase().includes(searchTerm)
    );
  }
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
  switch (filter) {
    case 'unread':
      filteredChats = filteredChats.filter(chat => hasUnreadMessages(chat));
      break;
    case 'recent':
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
      const weekAgo = new Date();
      weekAgo.setDate(weekAgo.getDate() - 7);
      filteredChats = filteredChats.filter(chat => {
        const lastMessageTime = chat.lastMessageTime?.toDate?.();
        return lastMessageTime && lastMessageTime > weekAgo;
      });
      break;
  }
  
  displayChats(filteredChats);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ—Ç —á–∞—Ç–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  if (filteredChats.length === 0) {
    chatsList.innerHTML = `
      <div class="no-chats-filtered">
        <p>üòî –ß–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p>
        <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã</p>
      </div>
    `;
  }
}

async function openChat(chatId) {
  try {
    currentChatId = chatId;
    
    // –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞
    currentChatData = allChats.find(chat => chat.id === chatId);
    
    if (!currentChatData) {
      alert('–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    const currentRole = window.authManager.getRole();
    const partnerName = currentRole === 'seeker' ? currentChatData.employerName : currentChatData.applicantName;
    
    chatWithName.textContent = partnerName;
    chatJobTitle.textContent = `–í–∞–∫–∞–Ω—Å–∏—è: ${currentChatData.jobTitle}`;
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
    viewVacancyBtn.onclick = () => {
      window.location.href = `vacancy.html?id=${currentChatData.jobId}`;
    };
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —á–∞—Ç–∞, —Å–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
    showChatDetail();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await loadMessages(chatId);
    
    // –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
    await window.chatManager.markMessagesAsRead(chatId, auth.currentUser.uid);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞:', error);
    alert('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞: ' + error.message);
  }
}

async function loadMessages(chatId) {
  try {
    messagesContainer.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...</div>';
    
    // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if (unsubscribeMessages) {
      unsubscribeMessages();
    }
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    unsubscribeMessages = window.chatManager.subscribeToChatMessages(
      chatId, 
      (messages) => {
        displayMessages(messages);
      }
    );
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    messagesContainer.innerHTML = '<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π</p>';
  }
}

function displayMessages(messages) {
  const currentUser = window.authManager.getUser();
  
  if (messages.length === 0) {
    messagesContainer.innerHTML = `
      <div class="no-messages">
        <p>–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π</p>
        <p>–ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–≤—ã–º!</p>
      </div>
    `;
    return;
  }
  
  messagesContainer.innerHTML = '';
  
  messages.forEach(message => {
    const messageElement = document.createElement('div');
    const isOwnMessage = message.senderId === currentUser.uid;
    
    messageElement.className = `message ${isOwnMessage ? 'own-message' : 'other-message'}`;
    
    const time = message.timestamp?.toDate?.();
    const timeText = time ? time.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' }) : '...';
    
    messageElement.innerHTML = `
      <div class="message-content">
        <p class="message-text">${message.text}</p>
        <span class="message-time">${timeText}</span>
        ${!isOwnMessage && !message.read ? '<span class="unread-badge">–Ω–æ–≤–æ–µ</span>' : ''}
      </div>
    `;
    
    messagesContainer.appendChild(messageElement);
  });
  
  // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
  messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
backToListBtn.addEventListener('click', () => {
  showChatsList();
  
  if (unsubscribeMessages) {
    unsubscribeMessages();
    unsubscribeMessages = null;
  }
  
  currentChatId = null;
  currentChatData = null;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
  loadChats();
});

sendMessageBtn.addEventListener('click', sendMessage);

messageInput.addEventListener('keypress', (e) => {
  if (e.key === 'Enter' && !e.shiftKey) {
    e.preventDefault();
    sendMessage();
  }
});

async function sendMessage() {
  const messageText = messageInput.value.trim();
  
  if (!messageText || !currentChatId) {
    return;
  }
  
  try {
    const currentUser = window.authManager.getUser();
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
    sendMessageBtn.disabled = true;
    sendMessageBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';
    
    await window.chatManager.sendMessage(currentChatId, messageText, currentUser.uid);
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
    messageInput.value = '';
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    alert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ' + error.message);
  } finally {
    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
    sendMessageBtn.disabled = false;
    sendMessageBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å';
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
function showLoading() {
  chatsLoading.style.display = 'block';
  chatsList.style.display = 'none';
  noChats.style.display = 'none';
  chatDetail.style.display = 'none';
}

function showChatsList() {
  chatsLoading.style.display = 'none';
  chatsList.style.display = 'block';
  noChats.style.display = 'none';
  chatDetail.style.display = 'none';
}

function showChatDetail() {
  chatsLoading.style.display = 'none';
  chatsList.style.display = 'none';
  noChats.style.display = 'none';
  chatDetail.style.display = 'block';
}

function showError(message) {
  chatsLoading.style.display = 'none';
  chatsList.style.display = 'none';
  noChats.style.display = 'block';
  noChatsMessage.innerHTML = message;
  noChatsActions.innerHTML = '';
}