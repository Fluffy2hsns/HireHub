import { 
  auth, 
  db, 
  onAuthStateChanged, 
  getDocs, 
  collection, 
  query, 
  where, 
  getDoc, 
  doc, 
  deleteDoc,
  updateDoc 
} from "./firebase.js";

const applicationsList = document.getElementById('applications-list');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
function getStatusLabel(status) {
  const statusLabels = {
    'active': '–ê–∫—Ç–∏–≤–Ω–∞',
    'paused': '–ù–∞ –ø–∞—É–∑–µ', 
    'closed': '–ó–∞–∫—Ä—ã—Ç–∞'
  };
  return statusLabels[status] || '–ê–∫—Ç–∏–≤–Ω–∞';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∫–∏ —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
function getEmploymentTypeLabel(type) {
  const labels = {
    'full': '–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å',
    'part': '–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å',
    'project': '–ü—Ä–æ–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞',
    'internship': '–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞',
    'remote': '–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞'
  };
  return labels[type] || type || '–ù–µ —É–∫–∞–∑–∞–Ω';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∫–∏ –æ–ø—ã—Ç–∞
function getExperienceLabel(experience) {
  const labels = {
    'no': '–ë–µ–∑ –æ–ø—ã—Ç–∞',
    '1-3': '1-3 –≥–æ–¥–∞',
    '3-6': '3-6 –ª–µ—Ç',
    '6+': '–ë–æ–ª–µ–µ 6 –ª–µ—Ç'
  };
  return labels[experience] || experience || '–ù–µ —É–∫–∞–∑–∞–Ω';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
function getWorkScheduleLabel(schedule) {
  const labels = {
    'full': '–ü–æ–ª–Ω—ã–π –¥–µ–Ω—å',
    'shift': '–°–º–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫',
    'flexible': '–ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫',
    'remote': '–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞'
  };
  return labels[schedule] || schedule || '–ù–µ —É–∫–∞–∑–∞–Ω';
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∫–ª–∏–∫–æ–≤ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è
async function loadSeekerApplications(userId) {
  applicationsList.innerHTML = '<h3>–ú–æ–∏ –æ—Ç–∫–ª–∏–∫–∏</h3>';
  
  try {
    const q = query(collection(db, 'applications'), where('userId', '==', userId));
    const snapshot = await getDocs(q);
    
    if (snapshot.empty) {
      applicationsList.innerHTML += '<p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∫–ª–∏–∫–æ–≤</p>';
      return;
    }
    
    for (const app of snapshot.docs) {
      const appData = app.data();
      const job = await getDoc(doc(db, 'vacancies', appData.jobId));
      
      if (job.exists()) {
        const jobData = job.data();
        applicationsList.innerHTML += `
          <div class="application-item">
            <h4>${jobData.title}</h4>
            <p><strong>–ö–æ–º–ø–∞–Ω–∏—è:</strong> ${jobData.companyName}</p>
            <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${jobData.description}</p>
            <p><strong>–î–∞—Ç–∞ –æ—Ç–∫–ª–∏–∫–∞:</strong> ${appData.appliedAt.toDate().toLocaleString()}</p>
            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ${appData.status === 'pending' ? '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏' : appData.status}</p>
            <hr>
          </div>
        `;
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∫–ª–∏–∫–æ–≤:', error);
    applicationsList.innerHTML += '<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∫–ª–∏–∫–æ–≤</p>';
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è
async function loadEmployerVacancies(employerId) {
  applicationsList.innerHTML = `
    <div class="employer-header">
      <h3>–ú–æ–∏ –≤–∞–∫–∞–Ω—Å–∏–∏</h3>
      <a href="add-job.html" class="add-vacancy-btn">‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é</a>
    </div>
  `;
  
  try {
    const jobsQ = query(collection(db, 'vacancies'), where('createdBy', '==', employerId));
    const jobs = await getDocs(jobsQ);
    
    if (jobs.empty) {
      applicationsList.innerHTML += `
        <div class="no-vacancies">
          <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π</p>
          <a href="add-job.html" class="add-vacancy-btn">–î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é</a>
        </div>
      `;
      return;
    }
    
    for (const job of jobs.docs) {
      const jobData = job.data();
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é
      const appsQ = query(collection(db, 'applications'), where('jobId', '==', job.id));
      const apps = await getDocs(appsQ);
      
      applicationsList.innerHTML += `
        <div class="vacancy-item" data-id="${job.id}">
          <div class="vacancy-header">
            <h4>${jobData.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h4>
            <span class="status-badge ${jobData.status || 'active'}">${getStatusLabel(jobData.status)}</span>
          </div>
          <div class="vacancy-info">
            <p><strong>–ö–æ–º–ø–∞–Ω–∏—è:</strong> ${jobData.companyName || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</p>
            <p><strong>–ó–∞—Ä–ø–ª–∞—Ç–∞:</strong> ${jobData.salary || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</p>
            <p><strong>–ì–æ—Ä–æ–¥:</strong> ${jobData.city || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
            <p><strong>–¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏:</strong> ${getEmploymentTypeLabel(jobData.employmentType)}</p>
            <p><strong>–û–ø—ã—Ç:</strong> ${getExperienceLabel(jobData.experience)}</p>
            <p><strong>–û—Ç–∫–ª–∏–∫–æ–≤:</strong> ${apps.size}</p>
            <p><strong>–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ:</strong> ${jobData.createdAt?.toDate?.()?.toLocaleDateString() || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</p>
          </div>
          <div class="vacancy-description">
            <p>${jobData.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</p>
          </div>
          <div class="vacancy-actions">
            <button class="edit-btn" onclick="editVacancy('${job.id}')">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
            <button class="view-applications-btn" onclick="viewApplications('${job.id}')">üìã –û—Ç–∫–ª–∏–∫–∏ (${apps.size})</button>
            <button class="delete-btn" onclick="deleteVacancy('${job.id}')">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
            <button class="status-btn" onclick="changeVacancyStatus('${job.id}', '${jobData.status || 'active'}')">üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å</button>
          </div>
        </div>
      `;
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π:', error);
    applicationsList.innerHTML += `
      <div class="error-message">
        <p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π: ${error.message}</p>
      </div>
    `;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é
window.viewApplications = async function(jobId) {
  try {
    const applicationsSection = document.createElement('div');
    applicationsSection.className = 'applications-section';
    applicationsSection.innerHTML = '<h4>–û—Ç–∫–ª–∏–∫–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é</h4>';
    
    const appsQ = query(collection(db, 'applications'), where('jobId', '==', jobId));
    const apps = await getDocs(appsQ);
    
    if (apps.empty) {
      applicationsSection.innerHTML += '<p>–ù–∞ —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∫–ª–∏–∫–æ–≤</p>';
    } else {
      for (const app of apps.docs) {
        const appData = app.data();
        const applicant = await getDoc(doc(db, 'users', appData.userId));
        const resume = applicant.data().resume || {};
        
        applicationsSection.innerHTML += `
          <div class="applicant-item">
            <div class="applicant-info">
              <p><strong>–°–æ–∏—Å–∫–∞—Ç–µ–ª—å:</strong> ${resume.name || 'N/A'} ${resume.surname || ''}</p>
              <p><strong>Email:</strong> ${resume.email || 'N/A'}</p>
              <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${resume.phone || 'N/A'}</p>
              <p><strong>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</strong> ${resume.profession || 'N/A'}</p>
              <p><strong>–ì–æ—Ä–æ–¥:</strong> ${resume.city || 'N/A'}</p>
              <p><strong>–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞:</strong> ${resume.salary || 'N/A'}</p>
              <p><strong>–î–∞—Ç–∞ –æ—Ç–∫–ª–∏–∫–∞:</strong> ${appData.appliedAt.toDate().toLocaleString()}</p>
            </div>
            <div class="applicant-actions">
              <button class="view-resume-btn" onclick="viewFullResume('${appData.userId}')">üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–Ω–æ–µ —Ä–µ–∑—é–º–µ</button>
              <button class="download-resume-btn" onclick="downloadResume('${appData.userId}')">üìÑ –°–∫–∞—á–∞—Ç—å PDF</button>
            </div>
          </div>
        `;
      }
    }
    
    showModal(applicationsSection);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∫–ª–∏–∫–æ–≤:', error);
    alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∫–ª–∏–∫–æ–≤: ' + error.message);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ
window.viewFullResume = async function(userId) {
  try {
    const applicant = await getDoc(doc(db, 'users', userId));
    const resume = applicant.data().resume || {};
    
    const resumeSection = document.createElement('div');
    resumeSection.className = 'full-resume';
    resumeSection.innerHTML = `
      <h4>–†–µ–∑—é–º–µ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è</h4>
      <div class="resume-content">
        <div class="resume-section">
          <h5>üë§ –õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h5>
          <p><strong>–§–ò–û:</strong> ${resume.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} ${resume.surname || ''} ${resume.patronymic || ''}</p>
          <p><strong>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</strong> ${resume.birthDate || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</p>
          <p><strong>Email:</strong> ${resume.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
          <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${resume.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
          <p><strong>–ì–æ—Ä–æ–¥:</strong> ${resume.city || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
          <p><strong>–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:</strong> ${resume.citizenship || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
        </div>
        
        <div class="resume-section">
          <h5>üíº –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h5>
          <p><strong>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</strong> ${resume.profession || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</p>
          <p><strong>–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞:</strong> ${resume.salary || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</p>
          <p><strong>–¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏:</strong> ${getEmploymentTypeLabel(resume.employmentType)}</p>
          <p><strong>–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:</strong> ${getWorkScheduleLabel(resume.workSchedule)}</p>
        </div>
        
        ${resume.experience ? `
        <div class="resume-section">
          <h5>üìà –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã</h5>
          <p>${resume.experience}</p>
        </div>
        ` : ''}
        
        ${resume.skills ? `
        <div class="resume-section">
          <h5>üõ†Ô∏è –ù–∞–≤—ã–∫–∏</h5>
          <p>${resume.skills}</p>
        </div>
        ` : ''}
        
        ${resume.about ? `
        <div class="resume-section">
          <h5>üëã –û —Å–µ–±–µ</h5>
          <p>${resume.about}</p>
        </div>
        ` : ''}
        
        ${resume.education ? `
        <div class="resume-section">
          <h5>üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</h5>
          <p>${resume.education}</p>
        </div>
        ` : ''}
        
        ${resume.language ? `
        <div class="resume-section">
          <h5>üåê –ó–Ω–∞–Ω–∏–µ —è–∑—ã–∫–æ–≤</h5>
          <p>${resume.language}</p>
        </div>
        ` : ''}
      </div>
      <div class="resume-actions">
        <button class="download-resume-btn" onclick="downloadResume('${userId}')">üìÑ –°–∫–∞—á–∞—Ç—å PDF</button>
        <button class="close-btn" onclick="closeModal()">–ó–∞–∫—Ä—ã—Ç—å</button>
      </div>
    `;
    
    showModal(resumeSection);
  } catch (error) {
    alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—é–º–µ: ' + error.message);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ä–µ–∑—é–º–µ –≤ PDF
window.downloadResume = async function(userId) {
  try {
    const applicant = await getDoc(doc(db, 'users', userId));
    const resume = applicant.data().resume || {};
    
    if (!resume.name) {
      alert('–†–µ–∑—é–º–µ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }

    const docDefinition = {
      content: [
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        { text: '–†–ï–ó–Æ–ú–ï', style: 'header' },
        
        // –õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        { text: '–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:', style: 'sectionHeader' },
        `–§–ò–û: ${resume.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} ${resume.surname || ''} ${resume.patronymic || ''}`.trim(),
        `–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${resume.birthDate || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`,
        `Email: ${resume.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}`,
        `–¢–µ–ª–µ—Ñ–æ–Ω: ${resume.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}`,
        `–ì–æ—Ä–æ–¥: ${resume.city || '–ù–µ —É–∫–∞–∑–∞–Ω'}`,
        `–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: ${resume.citizenship || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`,
        { text: '', margin: [0, 5] },
        
        // –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        { text: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:', style: 'sectionHeader' },
        `–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: ${resume.profession || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`,
        `–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: ${resume.salary || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`,
        `–¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏: ${getEmploymentTypeLabel(resume.employmentType)}`,
        `–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã: ${getWorkScheduleLabel(resume.workSchedule)}`,
        { text: '', margin: [0, 5] },
        
        // –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
        ...(resume.experience ? [
          { text: '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:', style: 'sectionHeader' },
          { text: resume.experience, margin: [0, 0, 0, 10] }
        ] : []),
        
        // –ù–∞–≤—ã–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        ...(resume.skills ? [
          { text: '–ù–∞–≤—ã–∫–∏:', style: 'sectionHeader' },
          { text: resume.skills, margin: [0, 0, 0, 10] }
        ] : []),
        
        // –û —Å–µ–±–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        ...(resume.about ? [
          { text: '–û —Å–µ–±–µ:', style: 'sectionHeader' },
          { text: resume.about, margin: [0, 0, 0, 10] }
        ] : []),
        
        // –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        ...(resume.education ? [
          { text: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:', style: 'sectionHeader' },
          { text: resume.education, margin: [0, 0, 0, 10] }
        ] : []),
        
        // –Ø–∑—ã–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        ...(resume.language ? [
          { text: '–ó–Ω–∞–Ω–∏–µ —è–∑—ã–∫–æ–≤:', style: 'sectionHeader' },
          { text: resume.language, margin: [0, 0, 0, 10] }
        ] : [])
      ],
      
      styles: {
        header: {
          fontSize: 18,
          bold: true,
          alignment: 'center',
          margin: [0, 0, 0, 15]
        },
        sectionHeader: {
          fontSize: 14,
          bold: true,
          margin: [0, 10, 0, 5]
        }
      },
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      pageSize: 'A4',
      pageMargins: [40, 40, 40, 40],
      defaultStyle: {
        fontSize: 12,
        lineHeight: 1.3
      }
    };

    // –°–∫–∞—á–∏–≤–∞–µ–º PDF
    const fileName = `resume_${resume.name}_${resume.surname || ''}.pdf`.replace(/\s+/g, '_');
    pdfMake.createPdf(docDefinition).download(fileName);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF:', error);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑—é–º–µ: ' + error.message);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
window.changeVacancyStatus = async function(jobId, currentStatus) {
  const statuses = {
    'active': '–ê–∫—Ç–∏–≤–Ω–∞',
    'paused': '–ù–∞ –ø–∞—É–∑–µ', 
    'closed': '–ó–∞–∫—Ä—ã—Ç–∞'
  };
  
  const newStatus = prompt(
    `–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${statuses[currentStatus]}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:\n- active (–ê–∫—Ç–∏–≤–Ω–∞)\n- paused (–ù–∞ –ø–∞—É–∑–µ)\n- closed (–ó–∞–∫—Ä—ã—Ç–∞)`,
    currentStatus
  );
  
  if (newStatus && ['active', 'paused', 'closed'].includes(newStatus)) {
    try {
      await updateDoc(doc(db, 'vacancies', jobId), {
        status: newStatus
      });
      alert(`–°—Ç–∞—Ç—É—Å –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${statuses[newStatus]}`);
      window.location.reload();
    } catch (error) {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: ' + error.message);
    }
  } else if (newStatus) {
    alert('–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: active, paused –∏–ª–∏ closed');
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏
window.editVacancy = function(jobId) {
  window.location.href = `edit-vacancy.html?id=${jobId}`;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏
window.deleteVacancy = async function(jobId) {
  if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é? –í—Å–µ –æ—Ç–∫–ª–∏–∫–∏ –Ω–∞ –Ω–µ–µ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.')) {
    return;
  }

  try {
    // –£–¥–∞–ª—è–µ–º –≤–∞–∫–∞–Ω—Å–∏—é
    await deleteDoc(doc(db, 'vacancies', jobId));
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∏
    const appsQ = query(collection(db, 'applications'), where('jobId', '==', jobId));
    const apps = await getDocs(appsQ);
    
    const deletePromises = apps.docs.map(app => deleteDoc(app.ref));
    await Promise.all(deletePromises);
    
    alert('–í–∞–∫–∞–Ω—Å–∏—è –∏ –≤—Å–µ –æ—Ç–∫–ª–∏–∫–∏ –Ω–∞ –Ω–µ–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!');
    window.location.reload();
  } catch (error) {
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏: ' + error.message);
  }
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function showModal(content) {
  let modal = document.getElementById('custom-modal');
  if (!modal) {
    modal = document.createElement('div');
    modal.id = 'custom-modal';
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <span class="close-button">&times;</span>
        <div class="modal-body"></div>
      </div>
    `;
    document.body.appendChild(modal);
    
    modal.querySelector('.close-button').onclick = closeModal;
    modal.onclick = function(event) {
      if (event.target === modal) {
        closeModal();
      }
    };
  }
  
  modal.querySelector('.modal-body').innerHTML = '';
  modal.querySelector('.modal-body').appendChild(content);
  modal.style.display = 'block';
}

function closeModal() {
  const modal = document.getElementById('custom-modal');
  if (modal) {
    modal.style.display = 'none';
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–¢–†–û–ö–ê
onAuthStateChanged(auth, async (user) => {
  if (user) {
    try {
      const userDoc = await getDoc(doc(db, 'users', user.uid));
      const role = userDoc.data().role;
      applicationsList.innerHTML = '';
      
      if (role === 'seeker') {
        await loadSeekerApplications(user.uid);
      } else if (role === 'employer') {
        await loadEmployerVacancies(user.uid);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      applicationsList.innerHTML = '<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</p>';
    }
  } else {
    window.location.href = 'register.html';
  }
});