// // auth-manager.js - —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
// import { 
//   auth, 
//   db, 
//   onAuthStateChanged, 
//   getDoc, 
//   doc, 
//   signOut 
// } from "./firebase.js";

// class AuthManager {
//   constructor() {
//     this.currentUser = null;
//     this.currentRole = null;
//     this.hasResume = false;
//     this.init();
//   }

//   init() {
//     console.log('üîÑ AuthManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...');
//     onAuthStateChanged(auth, async (user) => {
//       console.log('üîê –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω:', user ? `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.uid}` : '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
//       this.currentUser = user;
      
//       if (user) {
//         try {
//           const userDoc = await getDoc(doc(db, 'users', user.uid));
//           if (userDoc.exists()) {
//             const userData = userDoc.data();
//             this.currentRole = userData.role;
            
//             // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑—é–º–µ
//             this.hasResume = userData.resume && 
//                             userData.resume.name && 
//                             userData.resume.profession;
            
//             console.log('User data:', {
//               role: this.currentRole,
//               hasResume: this.hasResume
//             });
//           }
//         } catch (error) {
//           console.error('Error loading user data:', error);
//         }
//       } else {
//         this.currentRole = null;
//         this.hasResume = false;
//       }
      
//       this.updateNavigation();
//     });
//   }

//   updateNavigation() {
//     const loginBtn = document.getElementById('login-btn');
//     const logoutBtn = document.getElementById('logout-btn');
//     const resumeBtn = document.getElementById('resume-btn');
//     const addJobBtn = document.getElementById('add-job-btn');
//     const applicationsBtn = document.getElementById('applications-btn');
//     const notificationsBtn = document.getElementById('notifications-btn');
//     const chatsBtn = document.getElementById('chats-btn');

//     console.log('Updating navigation, user:', this.currentUser);

//     if (this.currentUser) {
//       // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
//       if (loginBtn) loginBtn.style.display = 'none';
//       if (logoutBtn) logoutBtn.style.display = 'block';
//       if (applicationsBtn) applicationsBtn.style.display = 'block';
//       if (notificationsBtn) notificationsBtn.style.display = 'block';
//       if (chatsBtn) chatsBtn.style.display = 'block';
      
//       // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–∑—é–º–µ –¥–ª—è —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π
//       if (resumeBtn) {
//         if (this.currentRole === 'seeker') {
//           resumeBtn.style.display = 'block';
//           if (this.hasResume) {
//             resumeBtn.innerHTML = '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∑—é–º–µ';
//             resumeBtn.href = 'resume.html';
//           } else {
//             resumeBtn.innerHTML = 'üìÑ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑—é–º–µ';
//             resumeBtn.href = 'resume.html';
//           }
//         } else {
//           resumeBtn.style.display = 'none';
//         }
//       }
      
//       // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π
//       if (addJobBtn) {
//         addJobBtn.style.display = this.currentRole === 'employer' ? 'block' : 'none';
//       }
      
//       // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
//       if (notificationsBtn) {
//         if (this.currentRole === 'employer') {
//           notificationsBtn.href = 'notifications.html';
//         } else if (this.currentRole === 'seeker') {
//           notificationsBtn.href = 'applicant-notifications.html';
//         }
//       }
      
//     } else {
//       // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
//       if (loginBtn) loginBtn.style.display = 'block';
//       if (logoutBtn) logoutBtn.style.display = 'none';
//       if (resumeBtn) resumeBtn.style.display = 'none';
//       if (addJobBtn) addJobBtn.style.display = 'none';
//       if (applicationsBtn) applicationsBtn.style.display = 'none';
//       if (notificationsBtn) notificationsBtn.style.display = 'none';
//       if (chatsBtn) chatsBtn.style.display = 'none';
//     }
//   }

//   async handleLogout() {
//     try {
//       await signOut(auth);
//       window.location.href = 'index.html';
//     } catch (error) {
//       alert('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: ' + error.message);
//     }
//   }

//   getUser() {
//     return this.currentUser;
//   }

//   getRole() {
//     return this.currentRole;
//   }

//   getHasResume() {
//     return this.hasResume;
//   }
// }

// // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
// window.authManager = new AuthManager();

// // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞
// document.addEventListener('DOMContentLoaded', function() {
//   const logoutBtn = document.getElementById('logout-btn');
//   if (logoutBtn) {
//     logoutBtn.addEventListener('click', async (e) => {
//       e.preventDefault();
//       await window.authManager.handleLogout();
//     });
//   }
// });


// auth-manager.js - —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
import { 
  auth, 
  db, 
  onAuthStateChanged, 
  getDoc, 
  doc, 
  signOut 
} from "./firebase.js";

class AuthManager {
  constructor() {
    this.currentUser = null;
    this.currentRole = null;
    this.hasResume = false;
    this.userData = null;
    this.isInitialized = false;
    this.authListeners = [];
    this.init();
  }

  init() {
    console.log('üîÑ AuthManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...');
    
    onAuthStateChanged(auth, async (user) => {
      await this.handleAuthStateChange(user);
    });
  }

  async handleAuthStateChange(user) {
    console.log('üîê –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω:', user ? `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.uid}` : '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    
    this.currentUser = user;
    
    if (user) {
      await this.loadUserData(user.uid);
    } else {
      this.resetUserData();
    }
    
    this.updateNavigation();
    this.notifyAuthListeners();
    this.isInitialized = true;
  }

  async loadUserData(userId) {
    try {
      const userDoc = await getDoc(doc(db, 'users', userId));
      
      if (userDoc.exists()) {
        this.userData = userDoc.data();
        this.currentRole = this.userData.role;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑—é–º–µ
        this.hasResume = this.userData.resume && 
                        this.userData.resume.name && 
                        this.userData.resume.profession;
        
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', {
          role: this.currentRole,
          hasResume: this.hasResume,
          email: this.userData.email
        });
      } else {
        console.warn('‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
        this.resetUserData();
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      this.resetUserData();
    }
  }

  resetUserData() {
    this.currentRole = null;
    this.hasResume = false;
    this.userData = null;
  }

  // updateNavigation() {
  //   const navElements = this.getNavElements();
    
  //   if (this.currentUser) {
  //     this.showAuthenticatedNavigation(navElements);
  //   } else {
  //     this.showUnauthenticatedNavigation(navElements);
  //   }
  // }

  // getNavElements() {
  //   return {
  //     loginBtn: document.getElementById('login-btn'),
  //     logoutBtn: document.getElementById('logout-btn'),
  //     resumeBtn: document.getElementById('resume-btn'),
  //     addJobBtn: document.getElementById('add-job-btn'),
  //     applicationsBtn: document.getElementById('applications-btn'),
  //     notificationsBtn: document.getElementById('notifications-btn'),
  //     chatsBtn: document.getElementById('chats-btn'),
  //     favoritesBtn: document.getElementById('favorites-btn')
  //   };
  // }


  updateNavigation() {
  const navElements = this.getNavElements();
  
  if (this.currentUser) {
    this.showAuthenticatedNavigation(navElements);
  } else {
    this.showUnauthenticatedNavigation(navElements);
  }
  }

  getNavElements() {
    return {
      loginBtn: document.getElementById('login-btn'),
      logoutBtn: document.getElementById('logout-btn'),
      resumeBtn: document.getElementById('resume-btn'),
      addJobBtn: document.getElementById('add-job-btn'),
      applicationsBtn: document.getElementById('applications-btn'),
      notificationsBtn: document.getElementById('notifications-btn'),
      chatsBtn: document.getElementById('chats-btn'),        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —á–∞—Ç–æ–≤
      favoritesBtn: document.getElementById('favorites-btn')
    };
  }

  showAuthenticatedNavigation(elements) {
    // –ë–∞–∑–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    this.toggleElement(elements.loginBtn, false);
    this.toggleElement(elements.logoutBtn, true);
    this.toggleElement(elements.applicationsBtn, true);
    this.toggleElement(elements.notificationsBtn, true);
    this.toggleElement(elements.chatsBtn, true);             // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Ç—ã –¥–ª—è –≤—Å–µ—Ö

    // –≠–ª–µ–º–µ–Ω—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    if (this.currentRole === 'seeker') {
      this.setupSeekerNavigation(elements);
    } else if (this.currentRole === 'employer') {
      this.setupEmployerNavigation(elements);
    }

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    this.setupNotificationsLink(elements.notificationsBtn);
  }


  showAuthenticatedNavigation(elements) {
    // –ë–∞–∑–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    this.toggleElement(elements.loginBtn, false);
    this.toggleElement(elements.logoutBtn, true);
    this.toggleElement(elements.applicationsBtn, true);
    this.toggleElement(elements.notificationsBtn, true);
    this.toggleElement(elements.chatsBtn, true);

    // –≠–ª–µ–º–µ–Ω—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    if (this.currentRole === 'seeker') {
      this.setupSeekerNavigation(elements);
    } else if (this.currentRole === 'employer') {
      this.setupEmployerNavigation(elements);
    }

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    this.setupNotificationsLink(elements.notificationsBtn);
  }

  showUnauthenticatedNavigation(elements) {
    Object.values(elements).forEach(element => {
      if (element) {
        const isLoginBtn = element.id === 'login-btn';
        element.style.display = isLoginBtn ? 'block' : 'none';
      }
    });
  }

  setupSeekerNavigation(elements) {
    this.toggleElement(elements.resumeBtn, true);
    this.toggleElement(elements.addJobBtn, false);
    this.toggleElement(elements.favoritesBtn, true);

    if (elements.resumeBtn) {
      this.updateResumeButton(elements.resumeBtn);
    }
  }

  setupEmployerNavigation(elements) {
    this.toggleElement(elements.resumeBtn, false);
    this.toggleElement(elements.addJobBtn, true);
    this.toggleElement(elements.favoritesBtn, false);
  }

  setupNotificationsLink(notificationsBtn) {
    if (!notificationsBtn) return;

    if (this.currentRole === 'employer') {
      notificationsBtn.href = 'notifications.html';
      notificationsBtn.innerHTML = 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è';
    } else if (this.currentRole === 'seeker') {
      notificationsBtn.href = 'applicant-notifications.html';
      notificationsBtn.innerHTML = 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è';
    }
  }

  updateResumeButton(resumeBtn) {
    if (this.hasResume) {
      resumeBtn.innerHTML = '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∑—é–º–µ';
      resumeBtn.href = 'resume.html';
    } else {
      resumeBtn.innerHTML = 'üìÑ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑—é–º–µ';
      resumeBtn.href = 'resume.html';
    }
  }

  toggleElement(element, show) {
    if (element) {
      element.style.display = show ? 'block' : 'none';
    }
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  onAuthChange(callback) {
    this.authListeners.push(callback);
    
    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º callback –µ—Å–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if (this.isInitialized) {
      callback({
        user: this.currentUser,
        role: this.currentRole,
        hasResume: this.hasResume
      });
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏
    return () => {
      this.authListeners = this.authListeners.filter(listener => listener !== callback);
    };
  }

  notifyAuthListeners() {
    const authState = {
      user: this.currentUser,
      role: this.currentRole,
      hasResume: this.hasResume,
      userData: this.userData
    };

    this.authListeners.forEach(callback => {
      try {
        callback(authState);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ auth listener:', error);
      }
    });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
  requireAuth(requiredRole = null) {
    return new Promise((resolve, reject) => {
      const checkAuth = () => {
        if (!this.currentUser) {
          reject(new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'));
          return;
        }

        if (requiredRole && this.currentRole !== requiredRole) {
          reject(new Error(`–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å: ${requiredRole}`));
          return;
        }

        resolve({
          user: this.currentUser,
          role: this.currentRole,
          userData: this.userData
        });
      };

      if (this.isInitialized) {
        checkAuth();
      } else {
        // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        const unsubscribe = this.onAuthChange(() => {
          unsubscribe();
          checkAuth();
        });

        // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞—Ç—è–Ω–µ—Ç—Å—è
        setTimeout(() => {
          if (!this.isInitialized) {
            reject(new Error('–¢–∞–π–º–∞—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'));
          }
        }, 5000);
      }
    });
  }

  // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è)
  isAuthenticated() {
    return !!this.currentUser;
  }

  isSeeker() {
    return this.currentRole === 'seeker';
  }

  isEmployer() {
    return this.currentRole === 'employer';
  }

  hasRole(role) {
    return this.currentRole === role;
  }

  async handleLogout() {
    try {
      console.log('üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...');
      await signOut(auth);
      console.log('‚úÖ –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      window.location.href = 'index.html';
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
      throw new Error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: ' + error.message);
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∑—é–º–µ)
  async refreshUserData() {
    if (this.currentUser) {
      await this.loadUserData(this.currentUser.uid);
    }
  }

  // –ì–µ—Ç—Ç–µ—Ä—ã
  getUser() {
    return this.currentUser;
  }

  getRole() {
    return this.currentRole;
  }

  getHasResume() {
    return this.hasResume;
  }

  getUserData() {
    return this.userData;
  }

  getUserId() {
    return this.currentUser?.uid;
  }

  // –°—Ç–∞—Ç—É—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  waitForInit() {
    return new Promise((resolve) => {
      if (this.isInitialized) {
        resolve();
      } else {
        const unsubscribe = this.onAuthChange(() => {
          unsubscribe();
          resolve();
        });
      }
    });
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.authManager = new AuthManager();

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞
document.addEventListener('DOMContentLoaded', function() {
  const logoutBtn = document.getElementById('logout-btn');
  if (logoutBtn) {
    logoutBtn.addEventListener('click', async (e) => {
      e.preventDefault();
      
      try {
        await window.authManager.handleLogout();
      } catch (error) {
        alert(error.message);
      }
    });
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
  const loginBtn = document.getElementById('login-btn');
  if (loginBtn) {
    loginBtn.addEventListener('click', (e) => {
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      console.log('‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    });
  }
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export { AuthManager };