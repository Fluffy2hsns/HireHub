// import { 
//   auth, 
//   db, 
//   onAuthStateChanged, 
//   getDocs, 
//   collection, 
//   query, 
//   where, 
//   getDoc, 
//   doc, 
//   updateDoc,
//   addDoc,
//   serverTimestamp 
// } from "./firebase.js";

// const notificationsList = document.getElementById('notifications-list');

// console.log('üîî notifications.js –∑–∞–≥—Ä—É–∂–µ–Ω');

// // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
// onAuthStateChanged(auth, async (user) => {
//   console.log('üîë –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', user ? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' : '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  
//   if (user) {
//     console.log('üë§ UID —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è:', user.uid);
//     await loadNotifications(user.uid);
//   } else {
//     notificationsList.innerHTML = '<p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É</p>';
//   }
// });

// // –ó–∞–≥—Ä—É–∑–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è
// async function loadNotifications(employerId) {
//   console.log('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è employerId:', employerId);
  
//   notificationsList.innerHTML = '<p>–ó–∞–≥—Ä—É–∑–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...</p>';
  
//   try {
//     const q = query(
//       collection(db, 'notifications'), 
//       where('employerId', '==', employerId)
//     );
    
//     const snapshot = await getDocs(q);
//     console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', snapshot.size);
    
//     notificationsList.innerHTML = '';
    
//     if (snapshot.empty) {
//       notificationsList.innerHTML = '<p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</p>';
//       return;
//     }
    
//     // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
//     const sortedNotifications = snapshot.docs.sort((a, b) => 
//       b.data().createdAt?.toDate() - a.data().createdAt?.toDate()
//     );
    
//     for (const notifDoc of sortedNotifications) {
//       const notif = notifDoc.data();
//       console.log('üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', notif.jobTitle);
      
//       const applicant = await getDoc(doc(db, 'users', notif.applicantId));
//       const resume = applicant.data().resume || {};
      
//       const notificationElement = document.createElement('div');
//       notificationElement.className = `notification-item ${notif.read ? 'read' : 'unread'}`;
      
//       // –£—Å–ª–æ–≤–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
//       const showFeedbackButton = !notif.feedback;
      
//       const feedbackButton = showFeedbackButton ? `
//         <button class="feedback-btn" onclick="showFeedbackForm('${notifDoc.id}', '${notif.applicantId}', '${notif.jobId}', '${notif.jobTitle}')">
//           üìù –î–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
//         </button>
//       ` : '';
      
//       // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∏–¥–±–µ–∫
//       const existingFeedback = notif.feedback ? `
//         <div class="existing-feedback">
//           <p><strong>–í–∞—à –æ—Ç–≤–µ—Ç:</strong> ${notif.feedback}</p>
//           <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ${notif.feedbackStatus === 'accepted' ? '‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ' : '‚ùå –û—Ç–∫–∞–∑'}</p>
//           <p><strong>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</strong> ${notif.feedbackSentAt?.toDate().toLocaleString() || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</p>
//         </div>
//       ` : '';
      
//       notificationElement.innerHTML = `
//         <h4>–ù–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é "${notif.jobTitle}"</h4>
//         <p><strong>–°–æ–∏—Å–∫–∞—Ç–µ–ª—å:</strong> ${notif.applicantName}</p>
//         <p><strong>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</strong> ${notif.applicantProfession}</p>
//         <p><strong>Email:</strong> ${resume.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
//         <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${resume.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
//         <p><strong>–î–∞—Ç–∞ –æ—Ç–∫–ª–∏–∫–∞:</strong> ${notif.createdAt?.toDate().toLocaleString() || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</p>
        
//         ${existingFeedback}
        
//         <div class="notification-actions">
//           <button class="view-resume-btn" onclick="viewFullResume('${notif.applicantId}')">üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—é–º–µ</button>
//           <button class="download-resume-btn" onclick="downloadResume('${notif.applicantId}')">üìÑ –°–∫–∞—á–∞—Ç—å PDF</button>
//           ${feedbackButton}
//           ${!notif.read ? `<button class="mark-read-btn" onclick="markAsRead('${notifDoc.id}')">–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ</button>` : ''}
//         </div>
//         <hr>
//       `;
      
//       notificationsList.appendChild(notificationElement);
//     }
    
//     console.log('‚úÖ –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    
//   } catch (error) {
//     console.error('üí• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
//     notificationsList.innerHTML = '<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</p>';
//   }
// }

// // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
// window.showFeedbackForm = function(notificationId, applicantId, jobId, jobTitle) {
//   console.log('üìù –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –¥–ª—è:', jobTitle);
  
//   const feedbackSection = document.createElement('div');
//   feedbackSection.className = 'feedback-form';
//   feedbackSection.innerHTML = `
//     <h4>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –¥–ª—è —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è</h4>
//     <p><strong>–í–∞–∫–∞–Ω—Å–∏—è:</strong> ${jobTitle}</p>
    
//     <div class="feedback-options">
//       <label>
//         <input type="radio" name="feedbackStatus" value="accepted" checked>
//         ‚úÖ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ
//       </label>
//       <label>
//         <input type="radio" name="feedbackStatus" value="rejected">
//         ‚ùå –û—Ç–∫–∞–∑–∞—Ç—å
//       </label>
//     </div>
    
//     <textarea id="feedback-message" placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è..." rows="4"></textarea>
    
//     <div class="feedback-templates">
//       <p><strong>–®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π:</strong></p>
//       <button type="button" onclick="fillTemplate('accepted')">üéØ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ</button>
//       <button type="button" onclick="fillTemplate('rejected')">üòî –í–µ–∂–ª–∏–≤—ã–π –æ—Ç–∫–∞–∑</button>
//     </div>
    
//     <div class="feedback-actions">
//       <button class="send-feedback-btn" onclick="sendFeedback('${notificationId}', '${applicantId}', '${jobId}')">
//         üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
//       </button>
//       <button class="cancel-btn" onclick="closeModal()">–û—Ç–º–µ–Ω–∞</button>
//     </div>
//   `;
  
//   showModal(feedbackSection);
// };

// // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
// window.fillTemplate = function(type) {
//   const textarea = document.getElementById('feedback-message');
//   const statusRadio = document.querySelector(`input[value="${type}"]`);
  
//   if (statusRadio) {
//     statusRadio.checked = true;
//   }
  
//   if (type === 'accepted') {
//     textarea.value = '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–ª–∏ –≤–∞—à–µ —Ä–µ–∑—é–º–µ –∏ —Ö–æ—Ç–µ–ª–∏ –±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤–∞—Å –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è.';
//   } else if (type === 'rejected') {
//     textarea.value = '–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –æ—Ç–∫–ª–∏–∫ –Ω–∞ –Ω–∞—à—É –≤–∞–∫–∞–Ω—Å–∏—é. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–∞—à–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä–∞ –Ω–∞–º –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç. –ñ–µ–ª–∞–µ–º —É—Å–ø–µ—Ö–æ–≤ –≤ –ø–æ–∏—Å–∫–µ —Ä–∞–±–æ—Ç—ã!';
//   }
// };

// // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
// window.sendFeedback = async function(notificationId, applicantId, jobId) {
//   const feedbackMessage = document.getElementById('feedback-message').value;
//   const feedbackStatus = document.querySelector('input[name="feedbackStatus"]:checked').value;
  
//   if (!feedbackMessage.trim()) {
//     alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è');
//     return;
//   }
  
//   try {
//     console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å...');
    
//     // –û–±–Ω–æ–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è
//     await updateDoc(doc(db, 'notifications', notificationId), {
//       feedback: feedbackMessage,
//       feedbackStatus: feedbackStatus,
//       feedbackSentAt: serverTimestamp(),
//       read: true
//     });
    
//     // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è
//     const jobDoc = await getDoc(doc(db, 'vacancies', jobId));
//     const jobData = jobDoc.data();
    
//     await addDoc(collection(db, 'applicant_notifications'), {
//       type: 'employer_feedback',
//       applicantId: applicantId,
//       employerId: auth.currentUser.uid,
//       jobId: jobId,
//       jobTitle: jobData.title,
//       companyName: jobData.companyName,
//       feedback: feedbackMessage,
//       feedbackStatus: feedbackStatus,
//       createdAt: serverTimestamp(),
//       read: false
//     });
    
//     // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–∫–ª–∏–∫–∞
//     const applicationsQuery = query(
//       collection(db, 'applications'),
//       where('jobId', '==', jobId),
//       where('userId', '==', applicantId)
//     );
    
//     const applications = await getDocs(applicationsQuery);
//     if (!applications.empty) {
//       await updateDoc(doc(db, 'applications', applications.docs[0].id), {
//         status: feedbackStatus === 'accepted' ? 'invited' : 'rejected'
//       });
//     }
    
//     alert('‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');
//     closeModal();
//     await loadNotifications(auth.currentUser.uid);
    
//   } catch (error) {
//     console.error('üí• –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:', error);
//     alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: ' + error.message);
//   }
// };

// // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ
// window.viewFullResume = async function(userId) {
//   try {
//     const applicant = await getDoc(doc(db, 'users', userId));
//     const resume = applicant.data().resume || {};
    
//     const resumeSection = document.createElement('div');
//     resumeSection.className = 'full-resume';
//     resumeSection.innerHTML = `
//       <h4>–†–µ–∑—é–º–µ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è</h4>
//       <div class="resume-content">
//         <div class="resume-section">
//           <h5>–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h5>
//           <p><strong>–ò–º—è:</strong> ${resume.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} ${resume.surname || ''}</p>
//           <p><strong>Email:</strong> ${resume.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
//           <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${resume.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
//         </div>
//         <div class="resume-section">
//           <h5>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h5>
//           <p><strong>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</strong> ${resume.profession || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</p>
//         </div>
//         ${resume.about ? `
//         <div class="resume-section">
//           <h5>–û —Å–µ–±–µ</h5>
//           <p>${resume.about}</p>
//         </div>
//         ` : ''}
//       </div>
//       <div class="resume-actions">
//         <button class="download-resume-btn" onclick="downloadResume('${userId}')">üìÑ –°–∫–∞—á–∞—Ç—å PDF</button>
//         <button class="close-btn" onclick="closeModal()">–ó–∞–∫—Ä—ã—Ç—å</button>
//       </div>
//     `;
    
//     showModal(resumeSection);
//   } catch (error) {
//     alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—é–º–µ: ' + error.message);
//   }
// };

// // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ä–µ–∑—é–º–µ –≤ PDF
// window.downloadResume = async function(userId) {
//   try {
//     const applicant = await getDoc(doc(db, 'users', userId));
//     const resume = applicant.data().resume || {};
    
//     if (!resume.name) {
//       alert('–†–µ–∑—é–º–µ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
//       return;
//     }

//     const docDefinition = {
//       content: [
//         // –ó–∞–≥–æ–ª–æ–≤–æ–∫
//         { text: '–†–ï–ó–Æ–ú–ï', style: 'header' },
        
//         // –õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
//         { text: '–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:', style: 'sectionHeader' },
//         `–§–ò–û: ${resume.name} ${resume.surname || ''} ${resume.patronymic || ''}`.trim(),
//         `Email: ${resume.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}`,
//         `–¢–µ–ª–µ—Ñ–æ–Ω: ${resume.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}`,
//         { text: '', margin: [0, 5] }, // –æ—Ç—Å—Ç—É–ø
        
//         // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å
//         { text: '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:', style: 'sectionHeader' },
//         resume.profession || '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
//         { text: '', margin: [0, 5] },
        
//         // –û —Å–µ–±–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
//         ...(resume.about ? [
//           { text: '–û —Å–µ–±–µ:', style: 'sectionHeader' },
//           { text: resume.about, margin: [0, 0, 0, 10] }
//         ] : []),
        
//         // –ù–∞–≤—ã–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
//         ...(resume.skills ? [
//           { text: '–ù–∞–≤—ã–∫–∏:', style: 'sectionHeader' },
//           { text: resume.skills, margin: [0, 0, 0, 10] }
//         ] : []),
        
//         // –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
//         ...(resume.experience ? [
//           { text: '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:', style: 'sectionHeader' },
//           { text: resume.experience, margin: [0, 0, 0, 10] }
//         ] : [])
//       ],
      
//       styles: {
//         header: {
//           fontSize: 18,
//           bold: true,
//           alignment: 'center',
//           margin: [0, 0, 0, 15]
//         },
//         sectionHeader: {
//           fontSize: 14,
//           bold: true,
//           margin: [0, 10, 0, 5]
//         }
//       },
      
//       // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
//       pageSize: 'A4',
//       pageMargins: [40, 40, 40, 40],
//       defaultStyle: {
//         fontSize: 12,
//         lineHeight: 1.3
//       }
//     };

//     // –°–∫–∞—á–∏–≤–∞–µ–º PDF
//     const fileName = `resume_${resume.name}_${resume.surname || ''}.pdf`.replace(/\s+/g, '_');
//     pdfMake.createPdf(docDefinition).download(fileName);
    
//   } catch (error) {
//     console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF:', error);
//     alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑—é–º–µ: ' + error.message);
//   }
// };

// // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
// window.markAsRead = async function(notificationId) {
//   try {
//     await updateDoc(doc(db, 'notifications', notificationId), {
//       read: true
//     });
    
//     const button = document.querySelector(`[onclick="markAsRead('${notificationId}')"]`);
//     if (button) {
//       button.style.display = 'none';
//       button.parentElement.parentElement.classList.add('read');
//     }
//   } catch (error) {
//     alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ' + error.message);
//   }
// };

// // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
// function showModal(content) {
//   let modal = document.getElementById('custom-modal');
//   if (!modal) {
//     modal = document.createElement('div');
//     modal.id = 'custom-modal';
//     modal.className = 'modal';
//     modal.innerHTML = `
//       <div class="modal-content">
//         <span class="close-button">&times;</span>
//         <div class="modal-body"></div>
//       </div>
//     `;
//     document.body.appendChild(modal);
    
//     modal.querySelector('.close-button').onclick = closeModal;
//     modal.onclick = function(event) {
//       if (event.target === modal) {
//         closeModal();
//       }
//     };
//   }
  
//   modal.querySelector('.modal-body').innerHTML = '';
//   modal.querySelector('.modal-body').appendChild(content);
//   modal.style.display = 'block';
// }

// function closeModal() {
//   const modal = document.getElementById('custom-modal');
//   if (modal) {
//     modal.style.display = 'none';
//   }
// }

// // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
// window.debugNotifications = async function() {
//   const user = auth.currentUser;
//   if (!user) {
//     console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
//     return;
//   }
  
//   console.log('=== üîç –û–¢–õ–ê–î–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ===');
//   console.log('UID —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è:', user.uid);
  
//   const q = query(collection(db, 'notifications'), where('employerId', '==', user.uid));
//   const snapshot = await getDocs(q);
  
//   console.log('üìä –í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', snapshot.size);
  
//   snapshot.docs.forEach((doc, index) => {
//     const data = doc.data();
//     console.log(`üìã –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ${index + 1}:`, {
//       id: doc.id,
//       read: data.read,
//       hasFeedback: !!data.feedback,
//       feedbackStatus: data.feedbackStatus,
//       jobTitle: data.jobTitle,
//       applicantName: data.applicantName
//     });
//   });
// };




// notifications.js
import { 
  auth, 
  db, 
  onAuthStateChanged, 
  getDocs, 
  collection, 
  query, 
  where, 
  getDoc, 
  doc, 
  updateDoc,
  addDoc,
  serverTimestamp,
  deleteDoc
} from "./firebase.js";

const notificationsList = document.getElementById('notifications-list');

console.log('üîî notifications.js –∑–∞–≥—Ä—É–∂–µ–Ω');

// –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
onAuthStateChanged(auth, async (user) => {
  console.log('üîë –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', user ? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' : '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  
  if (user) {
    console.log('üë§ UID —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è:', user.uid);
    await loadNotifications(user.uid);
  } else {
    notificationsList.innerHTML = '<p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É</p>';
  }
});

// –ó–∞–≥—Ä—É–∑–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è
async function loadNotifications(employerId) {
  console.log('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è employerId:', employerId);
  
  notificationsList.innerHTML = '<p>–ó–∞–≥—Ä—É–∑–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...</p>';
  
  try {
    const q = query(
      collection(db, 'notifications'), 
      where('employerId', '==', employerId)
    );
    
    const snapshot = await getDocs(q);
    console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', snapshot.size);
    
    notificationsList.innerHTML = '';
    
    if (snapshot.empty) {
      notificationsList.innerHTML = `
        <div class="no-notifications">
          <p>üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</p>
          <p>–ó–¥–µ—Å—å –±—É–¥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –æ—Ç–∫–ª–∏–∫–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π</p>
        </div>
      `;
      return;
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
    const sortedNotifications = snapshot.docs.sort((a, b) => 
      b.data().createdAt?.toDate() - a.data().createdAt?.toDate()
    );
    
    for (const notifDoc of sortedNotifications) {
      const notif = notifDoc.data();
      console.log('üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', notif.type, notif.jobTitle);
      
      await displayNotification(notifDoc.id, notif);
    }
    
    console.log('‚úÖ –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    notificationsList.innerHTML = `
      <div class="error-message">
        <p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</p>
        <p>${error.message}</p>
      </div>
    `;
  }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
async function displayNotification(notificationId, notif) {
  const notificationElement = document.createElement('div');
  notificationElement.className = `notification-item ${notif.read ? 'read' : 'unread'}`;
  
  let notificationHTML = '';
  
  // –†–∞–∑–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  if (notif.type === 'new_chat') {
    notificationHTML = await getNewChatNotificationHTML(notificationId, notif);
  } else if (notif.type === 'new_message') {
    notificationHTML = getNewMessageNotificationHTML(notificationId, notif);
  } else if (notif.type === 'new_application') {
    notificationHTML = await getNewApplicationNotificationHTML(notificationId, notif);
  } else {
    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤
    notificationHTML = getDefaultNotificationHTML(notificationId, notif);
  }
  
  notificationElement.innerHTML = notificationHTML;
  notificationsList.appendChild(notificationElement);
}

// –®–∞–±–ª–æ–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
async function getNewChatNotificationHTML(notificationId, notif) {
  try {
    const applicant = await getDoc(doc(db, 'users', notif.applicantId));
    const resume = applicant.data().resume || {};
    
    return `
      <div class="notification-header">
        <h4>üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è</h4>
        <span class="notification-date">
          ${notif.createdAt?.toDate().toLocaleString() || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
        </span>
      </div>
      
      <div class="notification-content">
        <p><strong>–°–æ–∏—Å–∫–∞—Ç–µ–ª—å:</strong> ${notif.applicantName}</p>
        <p><strong>–í–∞–∫–∞–Ω—Å–∏—è:</strong> ${notif.jobTitle}</p>
        <p><strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong> ${notif.message || '–ù–∞—á–∞–ª —á–∞—Ç —Å –≤–∞–º–∏'}</p>
        <p><strong>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</strong> ${resume.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'} | ${resume.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
      </div>
      
      <div class="notification-actions">
        <button class="chat-btn" onclick="openChat('${notif.chatId}')">
          üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –≤ —á–∞—Ç–µ
        </button>
        <button class="view-resume-btn" onclick="viewFullResume('${notif.applicantId}')">
          üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—é–º–µ
        </button>
        ${!notif.read ? `
          <button class="mark-read-btn" onclick="markAsRead('${notificationId}')">
            –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
          </button>
        ` : ''}
        <button class="delete-btn" onclick="deleteNotification('${notificationId}')">
          üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
        </button>
      </div>
      <hr>
    `;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è:', error);
    return getErrorNotificationHTML(notificationId, notif, '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è');
  }
}

// –®–∞–±–ª–æ–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
function getNewMessageNotificationHTML(notificationId, notif) {
  return `
    <div class="notification-header">
      <h4>üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ</h4>
      <span class="notification-date">
        ${notif.createdAt?.toDate().toLocaleString() || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
      </span>
    </div>
    
    <div class="notification-content">
      <p><strong>–û—Ç:</strong> ${notif.applicantName}</p>
      <p><strong>–í–∞–∫–∞–Ω—Å–∏—è:</strong> ${notif.jobTitle}</p>
      <p><strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong> "${notif.message}"</p>
    </div>
    
    <div class="notification-actions">
      <button class="chat-btn" onclick="openChat('${notif.chatId}')">
        üí¨ –ü–µ—Ä–µ–π—Ç–∏ –∫ —á–∞—Ç—É
      </button>
      ${!notif.read ? `
        <button class="mark-read-btn" onclick="markAsRead('${notificationId}')">
          –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
        </button>
      ` : ''}
      <button class="delete-btn" onclick="deleteNotification('${notificationId}')">
        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
      </button>
    </div>
    <hr>
  `;
}

// –®–∞–±–ª–æ–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞
async function getNewApplicationNotificationHTML(notificationId, notif) {
  try {
    const applicant = await getDoc(doc(db, 'users', notif.applicantId));
    const resume = applicant.data().resume || {};
    
    const showFeedbackButton = !notif.feedback;
    
    const feedbackButton = showFeedbackButton ? `
      <button class="feedback-btn" onclick="showFeedbackForm('${notificationId}', '${notif.applicantId}', '${notif.jobId}', '${notif.jobTitle}')">
        üìù –î–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
      </button>
    ` : '';
    
    const existingFeedback = notif.feedback ? `
      <div class="existing-feedback">
        <p><strong>–í–∞—à –æ—Ç–≤–µ—Ç:</strong> ${notif.feedback}</p>
        <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ${notif.feedbackStatus === 'accepted' ? '‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ' : '‚ùå –û—Ç–∫–∞–∑'}</p>
        <p><strong>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</strong> ${notif.feedbackSentAt?.toDate().toLocaleString() || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</p>
      </div>
    ` : '';
    
    return `
      <h4>üì® –ù–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é "${notif.jobTitle}"</h4>
      <p><strong>–°–æ–∏—Å–∫–∞—Ç–µ–ª—å:</strong> ${notif.applicantName}</p>
      <p><strong>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</strong> ${notif.applicantProfession}</p>
      <p><strong>Email:</strong> ${resume.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
      <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${resume.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
      <p><strong>–î–∞—Ç–∞ –æ—Ç–∫–ª–∏–∫–∞:</strong> ${notif.createdAt?.toDate().toLocaleString() || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</p>
      
      ${existingFeedback}
      
      <div class="notification-actions">
        <button class="view-resume-btn" onclick="viewFullResume('${notif.applicantId}')">
          üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—é–º–µ
        </button>
        <button class="chat-btn" onclick="startChatFromNotification('${notif.jobId}', '${notif.applicantId}', '${notif.jobTitle}')">
          üí¨ –ù–∞—á–∞—Ç—å —á–∞—Ç
        </button>
        ${feedbackButton}
        ${!notif.read ? `
          <button class="mark-read-btn" onclick="markAsRead('${notificationId}')">
            –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
          </button>
        ` : ''}
      </div>
      <hr>
    `;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è:', error);
    return getErrorNotificationHTML(notificationId, notif, '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è');
  }
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω
function getDefaultNotificationHTML(notificationId, notif) {
  return `
    <div class="notification-header">
      <h4>üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</h4>
      <span class="notification-date">
        ${notif.createdAt?.toDate().toLocaleString() || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
      </span>
    </div>
    
    <div class="notification-content">
      <p><strong>–¢–∏–ø:</strong> ${notif.type}</p>
      <p><strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong> ${notif.message || '–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'}</p>
    </div>
    
    <div class="notification-actions">
      ${!notif.read ? `
        <button class="mark-read-btn" onclick="markAsRead('${notificationId}')">
          –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
        </button>
      ` : ''}
      <button class="delete-btn" onclick="deleteNotification('${notificationId}')">
        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
      </button>
    </div>
    <hr>
  `;
}

// –®–∞–±–ª–æ–Ω –¥–ª—è –æ—à–∏–±–æ–∫
function getErrorNotificationHTML(notificationId, notif, errorMessage) {
  return `
    <div class="notification-header">
      <h4>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h4>
      <span class="notification-date">
        ${notif.createdAt?.toDate().toLocaleString() || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
      </span>
    </div>
    
    <div class="notification-content">
      <p><strong>–¢–∏–ø:</strong> ${notif.type}</p>
      <p><strong>–û—à–∏–±–∫–∞:</strong> ${errorMessage}</p>
    </div>
    
    <div class="notification-actions">
      <button class="delete-btn" onclick="deleteNotification('${notificationId}')">
        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
      </button>
    </div>
    <hr>
  `;
}

// –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–∞–º–∏
window.openChat = function(chatId) {
  window.location.href = `chats.html?chat=${chatId}`;
};

window.startChatFromNotification = async function(jobId, applicantId, jobTitle) {
  try {
    const currentUser = auth.currentUser;
    
    if (!window.chatManager || !window.chatManager.isInitialized) {
      window.chatManager.init(currentUser, 'employer');
    }
    
    const chat = await window.chatManager.getOrCreateChat(
      jobId, 
      applicantId, 
      currentUser.uid, 
      jobTitle
    );
    
    window.location.href = `chats.html?chat=${chat.id}`;
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —á–∞—Ç–∞:', error);
    alert('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —á–∞—Ç–∞: ' + error.message);
  }
};

window.deleteNotification = async function(notificationId) {
  if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ?')) {
    return;
  }

  try {
    await deleteDoc(doc(db, 'notifications', notificationId));
    await loadNotifications(auth.currentUser.uid);
  } catch (error) {
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ' + error.message);
  }
};

// –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–¥–æ–±–∞–≤—å—Ç–µ –∏—Ö –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
window.showFeedbackForm = function(notificationId, applicantId, jobId, jobTitle) {
  const feedbackSection = document.createElement('div');
  feedbackSection.className = 'feedback-form';
  feedbackSection.innerHTML = `
    <h4>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –¥–ª—è —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è</h4>
    <p><strong>–í–∞–∫–∞–Ω—Å–∏—è:</strong> ${jobTitle}</p>
    
    <div class="feedback-options">
      <label>
        <input type="radio" name="feedbackStatus" value="accepted" checked>
        ‚úÖ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ
      </label>
      <label>
        <input type="radio" name="feedbackStatus" value="rejected">
        ‚ùå –û—Ç–∫–∞–∑–∞—Ç—å
      </label>
    </div>
    
    <textarea id="feedback-message" placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è..." rows="4"></textarea>
    
    <div class="feedback-actions">
      <button class="send-feedback-btn" onclick="sendFeedback('${notificationId}', '${applicantId}', '${jobId}')">
        üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
      </button>
      <button class="cancel-btn" onclick="closeModal()">–û—Ç–º–µ–Ω–∞</button>
    </div>
  `;
  
  showModal(feedbackSection);
};

window.sendFeedback = async function(notificationId, applicantId, jobId) {
  const feedbackMessage = document.getElementById('feedback-message').value;
  const feedbackStatus = document.querySelector('input[name="feedbackStatus"]:checked').value;
  
  if (!feedbackMessage.trim()) {
    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è');
    return;
  }
  
  try {
    await updateDoc(doc(db, 'notifications', notificationId), {
      feedback: feedbackMessage,
      feedbackStatus: feedbackStatus,
      feedbackSentAt: serverTimestamp(),
      read: true
    });
    
    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è
    const jobDoc = await getDoc(doc(db, 'vacancies', jobId));
    const jobData = jobDoc.data();
    
    await addDoc(collection(db, 'applicant_notifications'), {
      type: 'employer_feedback',
      applicantId: applicantId,
      employerId: auth.currentUser.uid,
      jobId: jobId,
      jobTitle: jobData.title,
      companyName: jobData.companyName,
      feedback: feedbackMessage,
      feedbackStatus: feedbackStatus,
      createdAt: serverTimestamp(),
      read: false
    });
    
    alert('‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');
    closeModal();
    await loadNotifications(auth.currentUser.uid);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:', error);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: ' + error.message);
  }
};

window.viewFullResume = async function(userId) {
  try {
    const applicant = await getDoc(doc(db, 'users', userId));
    const resume = applicant.data().resume || {};
    
    const resumeSection = document.createElement('div');
    resumeSection.className = 'full-resume';
    resumeSection.innerHTML = `
      <h4>–†–µ–∑—é–º–µ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è</h4>
      <div class="resume-content">
        <div class="resume-section">
          <h5>–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h5>
          <p><strong>–ò–º—è:</strong> ${resume.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} ${resume.surname || ''}</p>
          <p><strong>Email:</strong> ${resume.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
          <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${resume.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
        </div>
        <div class="resume-section">
          <h5>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h5>
          <p><strong>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</strong> ${resume.profession || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</p>
        </div>
        ${resume.about ? `
        <div class="resume-section">
          <h5>–û —Å–µ–±–µ</h5>
          <p>${resume.about}</p>
        </div>
        ` : ''}
      </div>
      <div class="resume-actions">
        <button class="download-resume-btn" onclick="downloadResume('${userId}')">üìÑ –°–∫–∞—á–∞—Ç—å PDF</button>
        <button class="close-btn" onclick="closeModal()">–ó–∞–∫—Ä—ã—Ç—å</button>
      </div>
    `;
    
    showModal(resumeSection);
  } catch (error) {
    alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—é–º–µ: ' + error.message);
  }
};

window.markAsRead = async function(notificationId) {
  try {
    await updateDoc(doc(db, 'notifications', notificationId), {
      read: true
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const button = document.querySelector(`[onclick="markAsRead('${notificationId}')"]`);
    if (button) {
      button.style.display = 'none';
      button.parentElement.parentElement.classList.add('read');
    }
  } catch (error) {
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ' + error.message);
  }
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function showModal(content) {
  let modal = document.getElementById('custom-modal');
  if (!modal) {
    modal = document.createElement('div');
    modal.id = 'custom-modal';
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-content">
        <span class="close-button">&times;</span>
        <div class="modal-body"></div>
      </div>
    `;
    document.body.appendChild(modal);
    
    modal.querySelector('.close-button').onclick = closeModal;
    modal.onclick = function(event) {
      if (event.target === modal) {
        closeModal();
      }
    };
  }
  
  modal.querySelector('.modal-body').innerHTML = '';
  modal.querySelector('.modal-body').appendChild(content);
  modal.style.display = 'block';
}

function closeModal() {
  const modal = document.getElementById('custom-modal');
  if (modal) {
    modal.style.display = 'none';
  }
}

// –î–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ–Ω–µ—Ü notifications.js
window.debugNotifications = async function() {
  const user = auth.currentUser;
  if (!user) {
    console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    return;
  }
  
  console.log('=== üîç –û–¢–õ–ê–î–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ===');
  console.log('UID —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è:', user.uid);
  
  try {
    const q = query(collection(db, 'notifications'), where('employerId', '==', user.uid));
    const snapshot = await getDocs(q);
    
    console.log('üìä –í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –±–∞–∑–µ:', snapshot.size);
    
    if (snapshot.empty) {
      console.log('üì≠ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ—Ç');
      return;
    }
    
    snapshot.docs.forEach((doc, index) => {
      const data = doc.data();
      console.log(`üìã –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ${index + 1}:`, {
        id: doc.id,
        type: data.type,
        read: data.read,
        jobTitle: data.jobTitle,
        applicantName: data.applicantName,
        message: data.message,
        createdAt: data.createdAt?.toDate?.() || '–ù–µ—Ç –¥–∞—Ç—ã'
      });
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–∞–∫–∂–µ —á–∞—Ç—ã
    const chatsQuery = query(collection(db, 'chats'), where('participants', 'array-contains', user.uid));
    const chatsSnapshot = await getDocs(chatsQuery);
    console.log('üí¨ –í—Å–µ–≥–æ —á–∞—Ç–æ–≤:', chatsSnapshot.size);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏:', error);
  }
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ–º –æ—Ç–ª–∞–¥–∫—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
setTimeout(() => {
  if (auth.currentUser) {
    console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ª–∞–¥–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
    window.debugNotifications();
  }
}, 2000);