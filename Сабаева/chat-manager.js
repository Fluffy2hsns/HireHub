// // chat-manager.js
// import { 
//   db, collection, addDoc, doc, getDoc, getDocs, query, where, 
//   onSnapshot, updateDoc, arrayUnion, serverTimestamp, onAuthStateChanged 
// } from "./firebase.js";

// class ChatManager {
//   constructor() {
//     this.currentUser = null;
//     this.currentRole = null;
//     this.isInitialized = false;
//   }

//   init(user, role) {
//     this.currentUser = user;
//     this.currentRole = role;
//     this.isInitialized = true;
//     console.log('üí¨ ChatManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è:', { uid: user.uid, role });
//   }

//   // –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç
//   async getOrCreateChat(jobId, applicantId, employerId, jobTitle) {
//     try {
//       // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —á–∞—Ç –¥–ª—è —ç—Ç–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è
//       const chatsQuery = query(
//         collection(db, 'chats'),
//         where('jobId', '==', jobId),
//         where('applicantId', '==', applicantId)
//       );
      
//       const existingChats = await getDocs(chatsQuery);
      
//       if (!existingChats.empty) {
//         // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç
//         const chatDoc = existingChats.docs[0];
//         console.log('‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç:', chatDoc.id);
//         return { id: chatDoc.id, ...chatDoc.data() };
//       }
      
//       // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
//       const jobDoc = await getDoc(doc(db, 'vacancies', jobId));
//       const jobData = jobDoc.data();
      
//       const applicantDoc = await getDoc(doc(db, 'users', applicantId));
//       const applicantData = applicantDoc.data();
      
//       const employerDoc = await getDoc(doc(db, 'users', employerId));
//       const employerData = employerDoc.data();
      
//       const chatData = {
//         jobId: jobId,
//         jobTitle: jobTitle,
//         companyName: jobData.companyName,
//         applicantId: applicantId,
//         applicantName: `${applicantData.resume?.name || ''} ${applicantData.resume?.surname || ''}`.trim(),
//         employerId: employerId,
//         employerName: employerData.companyName || '–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å',
//         lastMessage: '',
//         lastMessageTime: serverTimestamp(),
//         createdAt: serverTimestamp(),
//         participants: [applicantId, employerId]
//       };
      
//       const chatRef = await addDoc(collection(db, 'chats'), chatData);
//       console.log('‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–∞—Ç:', chatRef.id);
      
//       return { id: chatRef.id, ...chatData };
      
//     } catch (error) {
//       console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞:', error);
//       throw error;
//     }
//   }

//   // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
//   async sendMessage(chatId, messageText, senderId) {
//     try {
//       const messageData = {
//         chatId: chatId,
//         senderId: senderId,
//         text: messageText,
//         timestamp: serverTimestamp(),
//         read: false
//       };
      
//       // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–∫–æ–ª–ª–µ–∫—Ü–∏—é
//       await addDoc(collection(db, 'chats', chatId, 'messages'), messageData);
      
//       // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
//       await updateDoc(doc(db, 'chats', chatId), {
//         lastMessage: messageText,
//         lastMessageTime: serverTimestamp()
//       });
      
//       console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç:', chatId);
      
//     } catch (error) {
//       console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
//       throw error;
//     }
//   }

//   // –ü–æ–ª—É—á–∏—Ç—å —á–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
//   async getUserChats(userId) {
//     try {
//       const chatsQuery = query(
//         collection(db, 'chats'),
//         where('participants', 'array-contains', userId)
//       );
      
//       const chatsSnapshot = await getDocs(chatsQuery);
//       const chats = [];
      
//       for (const chatDoc of chatsSnapshot.docs) {
//         const chatData = chatDoc.data();
        
//         // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ
//         const otherParticipantId = chatData.participants.find(id => id !== userId);
//         const otherUserDoc = await getDoc(doc(db, 'users', otherParticipantId));
//         const otherUserData = otherUserDoc.data();
        
//         chats.push({
//           id: chatDoc.id,
//           ...chatData,
//           otherParticipant: {
//             id: otherParticipantId,
//             name: this.currentRole === 'seeker' ? 
//                   chatData.employerName : 
//                   chatData.applicantName,
//             role: this.currentRole === 'seeker' ? 'employer' : 'seeker'
//           }
//         });
//       }
      
//       // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
//       chats.sort((a, b) => {
//         const timeA = a.lastMessageTime?.toDate?.() || new Date(0);
//         const timeB = b.lastMessageTime?.toDate?.() || new Date(0);
//         return timeB - timeA;
//       });
      
//       return chats;
      
//     } catch (error) {
//       console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤:', error);
//       throw error;
//     }
//   }

//   // –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
//   subscribeToChatMessages(chatId, callback) {
//     const messagesQuery = query(
//       collection(db, 'chats', chatId, 'messages'),
//       where('chatId', '==', chatId)
//     );
    
//     return onSnapshot(messagesQuery, (snapshot) => {
//       const messages = [];
//       snapshot.forEach(doc => {
//         messages.push({ id: doc.id, ...doc.data() });
//       });
      
//       // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
//       messages.sort((a, b) => {
//         const timeA = a.timestamp?.toDate?.() || new Date(0);
//         const timeB = b.timestamp?.toDate?.() || new Date(0);
//         return timeA - timeB;
//       });
      
//       callback(messages);
//     });
//   }

//   // –û—Ç–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
//   async markMessagesAsRead(chatId, userId) {
//     try {
//       const messagesQuery = query(
//         collection(db, 'chats', chatId, 'messages'),
//         where('chatId', '==', chatId),
//         where('senderId', '!=', userId),
//         where('read', '==', false)
//       );
      
//       const messagesSnapshot = await getDocs(messagesQuery);
//       const updatePromises = [];
      
//       messagesSnapshot.forEach(doc => {
//         updatePromises.push(updateDoc(doc.ref, { read: true }));
//       });
      
//       await Promise.all(updatePromises);
//       console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ');
      
//     } catch (error) {
//       console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
//     }
//   }
// }

// // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
// window.chatManager = new ChatManager();

// // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
// document.addEventListener('DOMContentLoaded', function() {
//   onAuthStateChanged(auth, (user) => {
//     if (user && window.authManager) {
//       const role = window.authManager.getRole();
//       window.chatManager.init(user, role);
//     }
//   });
// });


// chat-manager.js
// chat-manager.js
import { 
  db, collection, addDoc, doc, getDoc, getDocs, query, where, 
  onSnapshot, updateDoc, arrayUnion, serverTimestamp, onAuthStateChanged 
} from "./firebase.js";

class ChatManager {
  constructor() {
    this.currentUser = null;
    this.currentRole = null;
    this.isInitialized = false;
  }

  init(user, role) {
    this.currentUser = user;
    this.currentRole = role;
    this.isInitialized = true;
    console.log('üí¨ ChatManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è:', { uid: user.uid, role });
  }

  // –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç
  async getOrCreateChat(jobId, applicantId, employerId, jobTitle) {
    try {
      console.log('üîç –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —á–∞—Ç–∞...', { jobId, applicantId, employerId });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —á–∞—Ç –¥–ª—è —ç—Ç–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è
      const chatsQuery = query(
        collection(db, 'chats'),
        where('jobId', '==', jobId),
        where('applicantId', '==', applicantId)
      );
      
      const existingChats = await getDocs(chatsQuery);
      console.log('üìä –ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —á–∞—Ç–æ–≤:', existingChats.size);
      
      if (!existingChats.empty) {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç
        const chatDoc = existingChats.docs[0];
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç:', chatDoc.id);
        return { id: chatDoc.id, ...chatDoc.data() };
      }
      
      console.log('üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç...');
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
      const jobDoc = await getDoc(doc(db, 'vacancies', jobId));
      const jobData = jobDoc.data();
      
      const applicantDoc = await getDoc(doc(db, 'users', applicantId));
      const applicantData = applicantDoc.data();
      
      const employerDoc = await getDoc(doc(db, 'users', employerId));
      const employerData = employerDoc.data();
      
      const chatData = {
        jobId: jobId,
        jobTitle: jobTitle,
        companyName: jobData.companyName,
        applicantId: applicantId,
        applicantName: `${applicantData.resume?.name || ''} ${applicantData.resume?.surname || ''}`.trim(),
        employerId: employerId,
        employerName: employerData.companyName || '–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å',
        lastMessage: '',
        lastMessageTime: serverTimestamp(),
        createdAt: serverTimestamp(),
        participants: [applicantId, employerId]
      };
      
      const chatRef = await addDoc(collection(db, 'chats'), chatData);
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–∞—Ç:', chatRef.id);
      
      // –°–û–ó–î–ê–ï–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –î–õ–Ø –†–ê–ë–û–¢–û–î–ê–¢–ï–õ–Ø
      await this.createNewChatNotification(chatRef.id, applicantId, employerId, jobId, jobTitle, applicantData);
      
      return { id: chatRef.id, ...chatData };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞:', error);
      throw error;
    }
  }

  // –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —á–∞—Ç–µ –¥–ª—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è
  async createNewChatNotification(chatId, applicantId, employerId, jobId, jobTitle, applicantData) {
    try {
      console.log('üì¢ –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —á–∞—Ç–µ...', { employerId, chatId });
      
      const notificationData = {
        type: 'new_chat',
        employerId: employerId,
        applicantId: applicantId,
        chatId: chatId,
        jobId: jobId,
        jobTitle: jobTitle,
        applicantName: `${applicantData.resume?.name || ''} ${applicantData.resume?.surname || ''}`.trim(),
        applicantProfession: applicantData.resume?.profession || '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
        message: '–ù–∞–ø–∏—Å–∞–ª –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ',
        createdAt: serverTimestamp(),
        read: false
      };
      
      const notificationRef = await addDoc(collection(db, 'notifications'), notificationData);
      console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ:', notificationRef.id);
      console.log('üìã –î–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', notificationData);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
  }

  // –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
  async createNewMessageNotification(chatId, senderId, receiverId, messageText) {
    try {
      console.log('üì¢ –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏...', { chatId, receiverId });
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
      const chatDoc = await getDoc(doc(db, 'chats', chatId));
      if (!chatDoc.exists()) {
        console.log('‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', chatId);
        return;
      }
      
      const chatData = chatDoc.data();
      console.log('üìã –î–∞–Ω–Ω—ã–µ —á–∞—Ç–∞:', chatData);
      
      const notificationData = {
        type: 'new_message',
        receiverId: receiverId,
        senderId: senderId,
        chatId: chatId,
        jobId: chatData.jobId,
        jobTitle: chatData.jobTitle,
        applicantName: chatData.applicantName,
        employerName: chatData.employerName,
        message: messageText.substring(0, 100) + (messageText.length > 100 ? '...' : ''),
        createdAt: serverTimestamp(),
        read: false
      };
      
      const notificationRef = await addDoc(collection(db, 'notifications'), notificationData);
      console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å–æ–∑–¥–∞–Ω–æ:', notificationRef.id);
      console.log('üìã –î–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', notificationData);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏–∏:', error);
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
  async sendMessage(chatId, messageText, senderId) {
    try {
      console.log('üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è...', { chatId, senderId, messageLength: messageText.length });
      
      const messageData = {
        chatId: chatId,
        senderId: senderId,
        text: messageText,
        timestamp: serverTimestamp(),
        read: false
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–∫–æ–ª–ª–µ–∫—Ü–∏—é
      const messageRef = await addDoc(collection(db, 'chats', chatId, 'messages'), messageData);
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', messageRef.id);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
      await updateDoc(doc(db, 'chats', chatId), {
        lastMessage: messageText,
        lastMessageTime: serverTimestamp()
      });
      
      console.log('‚úÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ —á–∞—Ç–µ');
      
      // –°–û–ó–î–ê–ï–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û –ù–û–í–û–ú –°–û–û–ë–©–ï–ù–ò–ò
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–¥—Ä—É–≥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–∞—Ç–∞)
      const chatDoc = await getDoc(doc(db, 'chats', chatId));
      if (chatDoc.exists()) {
        const chatData = chatDoc.data();
        const receiverId = chatData.participants.find(id => id !== senderId);
        
        if (receiverId) {
          console.log('üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', receiverId);
          await this.createNewMessageNotification(chatId, senderId, receiverId, messageText);
        } else {
          console.log('‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  async getUserChats(userId) {
    try {
      const chatsQuery = query(
        collection(db, 'chats'),
        where('participants', 'array-contains', userId)
      );
      
      const chatsSnapshot = await getDocs(chatsQuery);
      const chats = [];
      
      for (const chatDoc of chatsSnapshot.docs) {
        const chatData = chatDoc.data();
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ
        const otherParticipantId = chatData.participants.find(id => id !== userId);
        const otherUserDoc = await getDoc(doc(db, 'users', otherParticipantId));
        const otherUserData = otherUserDoc.data();
        
        chats.push({
          id: chatDoc.id,
          ...chatData,
          otherParticipant: {
            id: otherParticipantId,
            name: this.currentRole === 'seeker' ? 
                  chatData.employerName : 
                  chatData.applicantName,
            role: this.currentRole === 'seeker' ? 'employer' : 'seeker'
          }
        });
      }
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      chats.sort((a, b) => {
        const timeA = a.lastMessageTime?.toDate?.() || new Date(0);
        const timeB = b.lastMessageTime?.toDate?.() || new Date(0);
        return timeB - timeA;
      });
      
      return chats;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤:', error);
      throw error;
    }
  }

  subscribeToChatMessages(chatId, callback) {
    const messagesQuery = query(
      collection(db, 'chats', chatId, 'messages'),
      where('chatId', '==', chatId)
    );
    
    return onSnapshot(messagesQuery, (snapshot) => {
      const messages = [];
      snapshot.forEach(doc => {
        messages.push({ id: doc.id, ...doc.data() });
      });
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
      messages.sort((a, b) => {
        const timeA = a.timestamp?.toDate?.() || new Date(0);
        const timeB = b.timestamp?.toDate?.() || new Date(0);
        return timeA - timeB;
      });
      
      callback(messages);
    });
  }

  async markMessagesAsRead(chatId, userId) {
    try {
      const messagesQuery = query(
        collection(db, 'chats', chatId, 'messages'),
        where('chatId', '==', chatId),
        where('senderId', '!=', userId),
        where('read', '==', false)
      );
      
      const messagesSnapshot = await getDocs(messagesQuery);
      const updatePromises = [];
      
      messagesSnapshot.forEach(doc => {
        updatePromises.push(updateDoc(doc.ref, { read: true }));
      });
      
      await Promise.all(updatePromises);
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.chatManager = new ChatManager();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
  onAuthStateChanged(auth, (user) => {
    if (user && window.authManager) {
      const role = window.authManager.getRole();
      window.chatManager.init(user, role);
      console.log('üí¨ ChatManager –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
    }
  });
});